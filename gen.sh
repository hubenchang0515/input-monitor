#! /usr/bin/bash

TYPES=(
    SYN
    KEY
    REL
    ABS
    MSC
    SW
    LED
    SND
    REP
)

# 生成表的定义
function generate_table_define()
{
    TYPE=$1
    echo "DEFINE_CODE_TABLE($TYPE);"
}

# 生成表的初始化函数
function generate_table_init()
{
    FILE=$1
    TYPE=$2
    PREFIX=$3
    CODES=$(grep -P "^#define\s+${PREFIX}_.*$" $FILE | grep -Pv '(_MAX|_CNT)' | grep -Po "${PREFIX}_.*?\b")
    
    echo 'static void init_'$TYPE'_table()'
    echo '{'
    for CODE in ${CODES[@]} 
    do
        echo "    #ifdef $CODE"
        echo "    NAME_ELEMENT($TYPE, $CODE);"
        echo "    #endif // $CODE"
        echo ''
    done
    echo '}'
}

# 生成总的初始化函数
function generate_init_all_tables()
{
    echo 'static bool init_all_tables()'
    echo '{'
    for TYPE in ${TYPES[@]}
    do
        echo '    init_'$TYPE'_table();'
    done
    echo '    return true;'
    echo '}'
    echo ''
}

function generate_all()
{
    echo '// generated by gen.sh'
    echo '#ifndef INPUT_EVENT_CODE_NAME_H'
    echo '#define INPUT_EVENT_CODE_NAME_H'
    echo ''
    echo '#include <linux/input.h>'
    echo '#include <stdlib.h>'
    echo ''
    echo '#define DEFINE_CODE_TABLE(TYPE) static const char* EV_## TYPE ##_CODE_NAME_TABLE[TYPE ## _CNT] = {NULL}'
    echo '#define NAME_ELEMENT(TYPE, CODE) (EV_## TYPE ##_CODE_NAME_TABLE[CODE] = #CODE)'
    echo ''
    echo '// 定义名称表'
    for TYPE in ${TYPES[@]}
    do
        if [ "$TYPE" == "KEY" ]
        then
            PREFIX='(KEY|BTN)'
        else
            PREFIX="$TYPE"
        fi
        generate_table_define $TYPE
        generate_table_init '/usr/include/linux/input-event-codes.h' $TYPE $PREFIX
        echo ''
    done
    generate_init_all_tables
    echo '#endif // INPUT_EVENT_CODE_NAME_H'
}

generate_all > input_event_code_name.h